// First, copy the template sheet here: https://docs.google.com/spreadsheets/d/17Ad4Ty8ubx9kZHsEDRmsGwkK4i04g1wm7JVlpL3YYR0/copy
// Then, paste your sheet URL below between the single quotes


const SHEET_URL = '';


// PMax Whisperer v3    (c) MikeRhodes.com.au
// You'll need to add your OpenAI API Key to the Settings tab - get one here: https://platform.openai.com/api-keys
// Then change the Settings on the sheet as desired & hit run, that's it!




// don't change the code below this line. pretty please. -------------------------------------------------------




function main() {
    try {
        let ss = SpreadsheetApp.openByUrl(SHEET_URL);
        let start = new Date();
        let s = getSettingsFromSheet();
        
        Object.keys(s).forEach(key => { 
            if (!key.startsWith('p_') && key !== 'apiKey') {Logger.log(key + ': ' + s[key]);}
        }); // log settings, but not the apikey & not those that start with p_
        let d = getDataForReport(s.report, s.pmaxUrl); // 
        let p = getPrompt(s.report, d, s.lang, s, s.whoFor); // prompt
        let o = generateTextOpenAI(p, s.apiKey, s.model); // output
        let a = s.useVoice === true ? textToSpeechOpenAI(o, s.report, s.apiKey, s.voice, s.folder) : null; // audio
        outputToSheet(o, s.report, a);
        s.useEmail === true ? sendEmail(s.email, s.report, o, s.useVoice, a) : null;
        Logger.log('Text output: ' + o);

        let end  = new Date();
        let dur = (end - start) / 1000;
        log(ss, dur, s); 
    } catch (error) {
        Logger.log('An error occurred: ' + error);
    }
}

function getSettingsFromSheet() {
    Logger.log('Getting settings from sheet');
    return {
        apiKey: getSheetValue('apiKey'),
        pmaxUrl: getSheetValue('pmaxUrl'),
        report: getSheetValue('report'),
        lang: getSheetValue('lang'),
        whoFor: getSheetValue('whoFor'),
        useVoice: getSheetValue('useVoice'),
        voice: getSheetValue('voice'),
        folder: getSheetValue('folder'),
        useEmail: getSheetValue('useEmail'),
        email: getSheetValue('email'),
        model: getSheetValue('model'),
        p_internal: getSheetValue('p_internal'),
        p_client: getSheetValue('p_client'),
        // get prompts from sheet (v3) for productTitles
        p_productTitles: getSheetValue('p_productTitles'),
        p_changeHistory: getSheetValue('p_changeHistory'),
        p_placement: getSheetValue('p_placement'),
        p_searchCategories: getSheetValue('p_searchCategories'),
        p_productMatrix: getSheetValue('p_productMatrix'),
        p_displayAds: getSheetValue('p_displayAds'),
        p_videoAds: getSheetValue('p_videoAds'),
        p_myData: getSheetValue('p_myData'),
    };
}

function getDataForReport(r, u) {
    Logger.log('Getting data for report: ' + r);
    switch (r) {
        case 'productTitles':
            return getDataFromSheet(u, 'productTitles', 'A:B');
        case 'changeHistory':
            return getDataFromSheet(u, 'changeData', 'B:L');
        case 'placement':
            return getDataFromSheet(u, 'place', 'A:S');
        case 'searchCategories':
            return getDataFromSheet(u, 'Categories', 'C4:J79');
        case 'productMatrix':
            return getDataFromSheet(u, 'Title', 'L2:T9');
        case 'displayAds':
            return getDataFromSheet(u, 'display', 'A:I');
        case 'videoAds':
            return getDataFromSheet(u, 'video', 'A:J');
        case 'myData':
            return getMyData();
        default:
            Logger.log('Invalid report name');
            return null;
    }
}

function getSheetValue(rangeName) {
    try {
        sheet = SpreadsheetApp.openByUrl(SHEET_URL).getSheetByName('Settings').getRange(rangeName).getValue();
        return sheet;
    } catch (error) {
        Logger.log(`Error in getting value for range ${rangeName}: ${error}`);
        return {};
    }
}

function getDataFromSheet(u, ss, range) {
    try {
        const sheet = SpreadsheetApp.openByUrl(u).getSheetByName(ss);
        if (!sheet) {
            throw new Error(`Sheet ${ss} not found in the spreadsheet.`);
        }
        const filteredData = sheet.getRange(range).getValues().filter(row => row.some(cell => !!cell));
        if (filteredData.length === 0) {
            throw new Error(`No data found in the range ${range} of sheet ${ss}.`);
        }
        const formattedData = filteredData.map(row => {
            return row.map(cell => {
                if (!isNaN(Number(cell))) {
                    return Number(cell).toFixed(2);
                } else {
                    return cell;
                }
            }).join(',');
        }).join('\n');
        return formattedData;
    } catch (error) {
        Logger.log(`Error in getting data from ${ss} tab: ${error}`);
        return null;
    }
}

function getMyData() {
    try {
        const sheet = SpreadsheetApp.openByUrl(SHEET_URL).getSheetByName('myData');
        // find the size of the data
        const lastRow = sheet.getLastRow();
        const lastColumn = sheet.getLastColumn();
        // get the range of the data
        const range = sheet.getRange(1, 1, lastRow, lastColumn);
        // get the values of the data
        const values = range.getValues();
        // filter out the empty rows
        const filteredData = values.filter(row => row.some(cell => !!cell));
        // format the data
        const formattedData = filteredData.map(row => {
            return row.map(cell => {
                if (!isNaN(Number(cell))) {
                    return Number(cell).toFixed(2);
                } else {
                    return cell;
                }
            }).join(',');
        }).join('\n');
        return formattedData;
    } catch (error) {
        Logger.log(`Error in fetching data from myData tab: ${error}`);
        return null;
    }
}

function log(ss, dur, s) {
    let newRow = [new Date(), dur, s.report, s.lang, s.useVoice, s.voice, s.useEmail, s.model];
    logUrl = ss.getRangeByName('u').getValue();
    [SpreadsheetApp.openByUrl(logUrl), ss].map(s => s.getSheetByName('log')).forEach(sheet => sheet.appendRow(newRow));
    Logger.log(`Script execution time: ${dur} seconds. Finished script.`);
}

function textToSpeechOpenAI(text, title, apiKey, voice, folder) {
    Logger.log('Converting audio version of report');
    const apiUrl = 'https://api.openai.com/v1/audio/speech'; // Endpoint for OpenAI TTS

    const payload = JSON.stringify({
        model: "tts-1",
        voice: voice,
        input: text
    });

    const options = {
        method: 'post',
        contentType: 'application/json',
        payload: payload,
        headers: {
            'Authorization': 'Bearer ' + apiKey
        },
        muteHttpExceptions: true // To handle HTTP errors gracefully
    };

    // Make the API request
    let response = UrlFetchApp.fetch(apiUrl, options);

    // Log the Content-Type header
    let contentType = response.getHeaders()['Content-Type'];

    if (contentType.includes('audio/mpeg')) {
        try {
            // Attempt to access the folder by ID
            let f = DriveApp.getFolderById(folderId);

            // If successful, proceed with saving the file
            let blob = response.getBlob();
            // Create short timestamp for file name
            let timeStamp = Utilities.formatDate(new Date(), "Australia/Sydney", "MMMdd_HHmm");
            let fileInFolder = f.createFile(blob.setName(title + ' ' + timeStamp + ".mp3"));
            let fileUrl = fileInFolder.getUrl();
            Logger.log('Audio file saved in folder: ' + fileUrl);

            return fileUrl;
        } catch (e) {
            // Handle the case where the folder does not exist
            Logger.log('Folder does not exist or access denied. Folder ID: ' + folderId);
            return null; 
        }
    } else {
        // Handle unexpected content types
        Logger.log('Unexpected content type: ' + contentType);
    }
}

function generateTextOpenAI(p, apiKey, model) {
    Logger.log('Generating report with OpenAI');
    let url = 'https://api.openai.com/v1/chat/completions';
    let messages = [
        { "role": "user", "content": p }
    ];
    let payload = {
        "model": model,
        "messages": messages
    };
    let httpOptions = {
        "method": "POST",
        "muteHttpExceptions": true,
        "contentType": "application/json",
        "headers": {
            "Authorization": 'Bearer ' + apiKey
        },
        'payload': JSON.stringify(payload)
    };
    let response = UrlFetchApp.fetch(url, httpOptions);
    let startTime = Date.now();
    while (response.getResponseCode() !== 200 && Date.now() - startTime < 30000) {
        Utilities.sleep(5000);
        response = UrlFetchApp.fetch(url, httpOptions);
        Logger.log('Time elapsed: ' + (Date.now() - startTime) / 1000 + ' seconds');
    }
    if (response.getResponseCode() !== 200) {
        Logger.log('Error: OpenAI API request timed out after 30 seconds. Please try again.');
        return;
    }
    let responseJson = JSON.parse(response.getContentText());
    let choices = responseJson.choices;
    let text = choices[0].message.content;
    return (text);
}

function outputToSheet(o, r, audioUrl) {
    const sheet = SpreadsheetApp.openByUrl(SHEET_URL).getSheetByName('Output');
    const timestamp = new Date().toLocaleString();
    const data = [[r, o, audioUrl, timestamp]];
    sheet.getRange('A2:E').clearContent();
    sheet.getRange(2, 2, 1, 4).setValues(data);
}

function sendEmail(e, r, o, useVoice, audioUrl) {
    let subject = 'Insights Created using the PMax Whisperer Script';
    let body = 'Hey<br>Your ' + r + ' insights are ready.<br>'
    if (useVoice === true) {
        let fileName = audioUrl.split('/').pop();
        body += '<br>Audio file: <a href="' + audioUrl + '">' + fileName + '</a>';
    }
    body += '\n' + o;

    // Sending the email
    try {
        if (e && e.includes('@')) {
            MailApp.sendEmail({
                to: e,
                subject: subject,
                htmlBody: body
            });
            Logger.log('Email sent to: ' + e);
        } else {
            Logger.log('Invalid email address: ' + e);
        }
    }
    catch (e) {
        Logger.log('Error sending email: ' + e);
    }
}

function getPrompt(r, d, l, s, w) {
    const prompt = s['p_' + r];

    const suffix = `
    You're an expert at analyzing google ads data & providing actionable insights.
    Give all answers in the ${l} language.
    `;

    let usageSuffix = '';
    switch (w) {
        case 'internal use':
            usageSuffix = s['p_internal'];
            break;
        case 'to send to client':
            usageSuffix = s['p_client'];
            break;
    }

    return (suffix + prompt + '\n' + usageSuffix + '\n' + d) || suffix;
}





// Thanks for trying out the pmax whisperer script.
// read the wiki for this script here: https://mikerhodes.notion.site/How-to-use-the-PMax-Whisperer-Script-Sheet-4ebcf31a249a49e2a651e46c4e15c0d5


// PS To get updates about my scripts & training, drop me your email here:
// https://pmaxscript.ck.page/update


// PPS you're awesome!
